---
name: Build CLI

on:
  pull_request:
    branches-ignore:
      - 'l10n_master'
      - 'cf-pages'
    paths:
      - 'apps/cli/**'
      - 'libs/**'
      - '*'
      - '!*.md'
      - '!*.txt'
      - '.github/workflows/build-cli.yml'
  push:
    branches:
      - 'master'
      - 'rc'
      - 'hotfix-rc-cli'
    paths:
      - 'apps/cli/**'
      - 'libs/**'
      - '*'
      - '!*.md'
      - '!*.txt'
      - '.github/workflows/build-cli.yml'
  workflow_dispatch:
    inputs: {}

defaults:
  run:
    working-directory: apps/cli

jobs:
  cloc:
    name: CLOC
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b  # v3.0.2

      - name: Set up cloc
        run: |
          sudo apt update
          sudo apt -y install cloc

      - name: Print lines of code
        run: cloc --include-lang TypeScript,JavaScript --vcs git


  setup:
    name: Setup
    runs-on: ubuntu-20.04
    outputs:
      package_version: ${{ steps.retrieve-version.outputs.package_version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b  # v3.0.2

      - name: Get Package Version
        id: retrieve-version
        run: |
          PKG_VERSION=$(jq -r .version package.json)
          echo "package_version=$PKG_VERSION" >> $GITHUB_OUTPUT


  cli:
    name: Build CLI ${{ matrix.os }} (${{ matrix.arch }})
    strategy:
      matrix:
        arch: [x64, arm64]
        os: [linux, macos, windows]
    runs-on: ubuntu-20.04
    needs:
      - setup
    env:
      _PACKAGE_VERSION: ${{ needs.setup.outputs.package_version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b  # v3.0.2

      - name: Setup Unix Vars
        run: |
          echo "SHORT_RUNNER_OS=$(echo ${{ matrix.os }} | awk '{print substr($0, 1, 3)}' | \
            awk '{print tolower($0)}')" >> $GITHUB_ENV
          echo "BINARY_FILE_NAME=bw" >> $GITHUB_ENV
          if [[ "${{ matrix.os }}" == "windows" ]]; then
            echo "BINARY_FILE_NAME=bw.exe" >> $GITHUB_ENV
          fi

      - name: Configure binfmt with QEMU User Emulation
        run: |
          sudo apt install qemu binfmt-support qemu-user-static

      - name: Set up Node
        uses: actions/setup-node@17f8bd926464a1afa4c6a11669539e9c1ba77048  # v3.2.0
        with:
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
          node-version: '16'

      - name: Install node-gyp
        run: |
          npm install -g node-gyp
          node-gyp install $(node -v)

      - name: Install
        run: npm ci
        working-directory: ./

      - name: Build & Package Unix
        run: npm run dist:$SHORT_RUNNER_OS:${{ matrix.arch }} --quiet

      - name: Zip Unix
        run: |
          cd ./dist/${{ matrix.os }}/${{ matrix.arch }}
          zip ../../bw-${{ matrix.os }}-${{ env._PACKAGE_VERSION }}-${{ matrix.arch }}.zip ./${{ env.BINARY_FILE_NAME }}

      - name: Create checksums Unix
        run: |
          cd ./dist
          shasum -a 256 bw-${{ matrix.os }}-${{ env._PACKAGE_VERSION }}-${{ matrix.arch }}.zip \
            | awk '{split($0, a); print a[1]}' > bw-${{ matrix.os }}-sha256-${{ env._PACKAGE_VERSION }}-${{ matrix.arch }}.txt

      - name: Upload unix zip asset
        uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8  # v3.1.0
        with:
          name: bw-${{ matrix.os }}-${{ env._PACKAGE_VERSION }}-${{ matrix.arch }}.zip
          path: apps/cli/dist/bw-${{ matrix.os }}-${{ env._PACKAGE_VERSION }}-${{ matrix.arch }}.zip
          if-no-files-found: error

      - name: Upload unix checksum asset
        uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8  # v3.1.0
        with:
          name: bw-${{ matrix.os }}-sha256-${{ env._PACKAGE_VERSION }}-${{ matrix.arch }}.txt
          path: apps/cli/dist/bw-${{ matrix.os }}-sha256-${{ env._PACKAGE_VERSION }}-${{ matrix.arch }}.txt
          if-no-files-found: error

  test:
    name: Test CLI ${{ matrix.os }} (${{ matrix.arch }})
    strategy:
      matrix:
        os:
          - os: ubuntu-20.04
            arch: [x64]
          - os: macos-14
            arch: [x64, arm64]
    runs-on: ${{ matrix.os }}
    needs:
      - setup
      - cli
    env:
      _PACKAGE_VERSION: ${{ needs.setup.outputs.package_version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b  # v3.0.2

      - name: Setup Unix Vars
        run: |
          echo "LOWER_RUNNER_OS=$(echo $RUNNER_OS | awk '{print tolower($0)}')" >> $GITHUB_ENV

      - name: Get bw ${{ env.LOWER_RUNNER_OS }} ${{ matrix.arch }} cli
        uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741
        with:
          name: bw-${{ env.LOWER_RUNNER_OS }}-${{ env._PACKAGE_VERSION }}-${{ matrix.arch }}.zip
          path: apps/cli/dist

      - name: Version Test
        run: |
          unzip "dist/bw-${{ env.LOWER_RUNNER_OS }}-${{ env._PACKAGE_VERSION }}-${{ matrix.arch }}.zip" -d "dist/test"
          testVersion=$(dist/test/bw -v)
          echo "version: $_PACKAGE_VERSION"
          echo "testVersion: $testVersion"
          if [[ $testVersion != $_PACKAGE_VERSION ]]; then
            echo "Version test failed."
            exit 1
          fi

  test-windows:
    name: Test CLI ${{ matrix.os }} (${{ matrix.arch }})
    strategy:
      matrix:
        arch: [x64]
        os: [windows-2019]
    runs-on: ${{ matrix.os }}
    needs:
      - setup
      - cli
    env:
      _PACKAGE_VERSION: ${{ needs.setup.outputs.package_version }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b  # v3.0.2

      - name: Get bw windows ${{ matrix.arch }} cli
        uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741
        with:
          name: bw-windows-${{ env._PACKAGE_VERSION }}-${{ matrix.arch }}.zip
          path: apps/cli/dist

          

      - name: Version Test
        run: |
          dir ./dist
          Expand-Archive -Path "./dist/bw-windows-${{ env._PACKAGE_VERSION }}-${{ matrix.arch }}.zip" -DestinationPath "./test/windows"
          $testVersion = Invoke-Expression '& ./test/windows/bw.exe -v'
          echo "version: $env:_PACKAGE_VERSION"
          echo "testVersion: $testVersion"
          if($testVersion -ne $env:_PACKAGE_VERSION) {
            Throw "Version test failed."
          }

  # snap:
  #   name: Build Snap
  #   runs-on: ubuntu-20.04
  #   needs: [setup, cli, test]
  #   env:
  #     _PACKAGE_VERSION: ${{ needs.setup.outputs.package_version }}
  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b  # v3.0.2

  #     - name: Print environment
  #       run: |
  #         whoami
  #         echo "GitHub ref: $GITHUB_REF"
  #         echo "GitHub event: $GITHUB_EVENT"
  #         echo "BW Package Version: $_PACKAGE_VERSION"

  #     - name: Get bw linux cli
  #       uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741
  #       with:
  #         name: bw-linux-${{ env._PACKAGE_VERSION }}.zip
  #         path: apps/cli/dist/snap

  #     - name: Setup Snap Package
  #       run: |
  #         cp -r stores/snap/* -t dist/snap
  #         sed -i s/__version__/${{ env._PACKAGE_VERSION }}/g dist/snap/snapcraft.yaml
  #         cd dist/snap
  #         ls -alth

  #     - name: Build snap
  #       uses: snapcore/action-build@ea14cdeb353272f75977040488ca191880509a8c  # v1.1.0
  #       with:
  #         path: apps/cli/dist/snap

  #     - name: Create checksum
  #       run: |
  #         cd dist/snap
  #         ls -alth
  #         sha256sum bw_${{ env._PACKAGE_VERSION }}_amd64.snap \
  #           | awk '{split($0, a); print a[1]}' > bw-snap-sha256-${{ env._PACKAGE_VERSION }}.txt

  #     - name: Install Snap
  #       run: sudo snap install dist/snap/bw*.snap --dangerous

  #     - name: Test Snap
  #       shell: pwsh
  #       run: |
  #         $testVersion = Invoke-Expression '& bw -v'
  #         if($testVersion -ne $env:_PACKAGE_VERSION) {
  #           Throw "Version test failed."
  #         }
  #       env:
  #         BITWARDENCLI_APPDATA_DIR: "/home/runner/snap/bw/x1/.config/Bitwarden CLI"

  #     - name: Cleanup Test & Update Snap for Publish
  #       shell: pwsh
  #       run: sudo snap remove bw

  #     - name: Upload snap asset
  #       uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8  # v3.1.0
  #       with:
  #         name: bw_${{ env._PACKAGE_VERSION }}_amd64.snap
  #         path: apps/cli/dist/snap/bw_${{ env._PACKAGE_VERSION }}_amd64.snap
  #         if-no-files-found: error

  #     - name: Upload snap checksum asset
  #       uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8  # v3.1.0
  #       with:
  #         name: bw-snap-sha256-${{ env._PACKAGE_VERSION }}.txt
  #         path: apps/cli/dist/snap/bw-snap-sha256-${{ env._PACKAGE_VERSION }}.txt
  #         if-no-files-found: error
